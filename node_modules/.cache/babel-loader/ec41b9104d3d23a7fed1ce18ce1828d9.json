{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/src/Components/VideoPage/VideoPage.js\";\nimport React from \"react\";\nimport youtube from \"../../Apis/Youtube\";\nimport VideoList from \"./VideoList\";\nimport { Row, Grid } from \"react-bootstrap\";\n\nvar VideoPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VideoPage, _React$Component);\n\n  function VideoPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VideoPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VideoPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      videos: [],\n      update: [],\n      uploadDate: function uploadDate() {\n        var date = _this.state.videos.map(function (video) {\n          return video.items.snippet.publishedAt;\n        });\n\n        _this.setState({\n          update: date\n        });\n      }\n    };\n\n    _this.onTermSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(term) {\n        var responde;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return youtube.get(\"/search\", {\n                  params: {\n                    part: \"snippet\",\n                    q: term\n                  }\n                });\n\n              case 2:\n                responde = _context.sent;\n\n                _this.setState({\n                  videos: responde.data.items\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(VideoPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onTermSubmit(\"PAQ\");\n      this.state.uploadDate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(VideoList, {\n        videos: this.state.videos,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), \";\"));\n    }\n  }]);\n\n  return VideoPage;\n}(React.Component);\n\nexport default VideoPage;","map":{"version":3,"sources":["/Users/aryankatebian/Desktop/javascript30/kyra/kyra-tv/src/Components/VideoPage/VideoPage.js"],"names":["React","youtube","VideoList","Row","Grid","VideoPage","state","videos","update","uploadDate","date","map","video","items","snippet","publishedAt","setState","onTermSubmit","term","get","params","part","q","responde","data","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,iBAA1B;;IAEMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,UAAU,EAAE,sBAAM;AAChB,YAAMC,IAAI,GAAG,MAAKJ,KAAL,CAAWC,MAAX,CAAkBI,GAAlB,CACX,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,WAAxB;AAAA,SADM,CAAb;;AAGA,cAAKC,QAAL,CAAc;AAAER,UAAAA,MAAM,EAAEE;AAAV,SAAd;AACD;AARK,K;;UAeRO,Y;;;;;+BAAe,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACUjB,OAAO,CAACkB,GAAR,CAAY,SAAZ,EAAuB;AAC5CC,kBAAAA,MAAM,EAAE;AACNC,oBAAAA,IAAI,EAAE,SADA;AAENC,oBAAAA,CAAC,EAAEJ;AAFG;AADoC,iBAAvB,CADV;;AAAA;AACPK,gBAAAA,QADO;;AAOb,sBAAKP,QAAL,CAAc;AACZT,kBAAAA,MAAM,EAAEgB,QAAQ,CAACC,IAAT,CAAcX;AADV,iBAAd;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;wCALK;AAClB,WAAKI,YAAL,CAAkB,KAAlB;AACA,WAAKX,KAAL,CAAWG,UAAX;AACD;;;6BAcQ;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,MADF,CADF;AAOD;;;;EApCqBP,KAAK,CAACyB,S;;AAsC9B,eAAepB,SAAf","sourcesContent":["import React from \"react\";\nimport youtube from \"../../Apis/Youtube\";\nimport VideoList from \"./VideoList\";\nimport { Row, Grid } from \"react-bootstrap\";\n\nclass VideoPage extends React.Component {\n  state = {\n    videos: [],\n    update: [],\n    uploadDate: () => {\n      const date = this.state.videos.map(\n        video => video.items.snippet.publishedAt\n      );\n      this.setState({ update: date });\n    }\n  };\n  componentDidMount() {\n    this.onTermSubmit(\"PAQ\");\n    this.state.uploadDate();\n  }\n\n  onTermSubmit = async term => {\n    const responde = await youtube.get(\"/search\", {\n      params: {\n        part: \"snippet\",\n        q: term\n      }\n    });\n    this.setState({\n      videos: responde.data.items\n    });\n  };\n\n  render() {\n    return (\n      <Grid>\n        <Row className=\"show-grid\">\n          <VideoList videos={this.state.videos} />;\n        </Row>\n      </Grid>\n    );\n  }\n}\nexport default VideoPage;\n"]},"metadata":{},"sourceType":"module"}